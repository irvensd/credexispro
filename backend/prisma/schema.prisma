// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id           String   @id @default(uuid())
  name         String
  plan         String
  status       String   @default("active")
  contactEmail String?
  address      String?
  users        User[]
  invites      Invite[]
  auditLogs    AuditLog[]
  apiKeys      ApiKey[]
  roles        Role[]
  sessions     Session[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  files        File[]
  notifications Notification[]
  clients      Client[]
  disputes     Dispute[]
  tasks        Task[]
}

model Role {
  id             String   @id @default(uuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  users          User[]
  permissions    Permission[] @relation("RolePermissions")

  @@unique([name, organizationId])
  @@index([organizationId])
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  roles       Role[]   @relation("RolePermissions")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String
  password       String
  status         String   @default("active")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           Role?    @relation(fields: [roleId], references: [id])
  roleId         String?
  sessions       Session[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  files          File[]
  notifications  Notification[]
  assignedTasks  Task[]   @relation("TaskAssignee")
  createdTasks   Task[]   @relation("TaskCreator")
}

model Invite {
  id             String   @id @default(uuid())
  email          String
  role           String
  token          String   @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  sentAt         DateTime @default(now())
  status         String   @default("pending") // pending, accepted, revoked, expired
  acceptedAt     DateTime?
  expiresAt      DateTime?

  @@index([token])
  @@index([organizationId])
}

model AuditLog {
  id             String   @id @default(uuid())
  timestamp      DateTime @default(now())
  actorId        String?
  actorEmail     String?
  eventType      String
  resource       String
  resourceId     String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  ip             String?
  details        String?

  @@index([organizationId])
  @@index([eventType])
}

model ApiKey {
  id             String   @id @default(uuid())
  key            String   @unique
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime @default(now())
  lastUsed       DateTime?
  status         String   @default("active") // active, revoked

  @@index([organizationId])
  @@index([status])
}

model Session {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  device         String?
  ip             String?
  loginAt        DateTime @default(now())
  lastActive     DateTime?
  status         String   @default("active") // active, revoked

  @@index([organizationId])
  @@index([status])
}

model File {
  id             String   @id @default(uuid())
  name           String
  path           String
  size           Int
  mimeType       String
  userId         String
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Notification {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  type           String
  message        String
  read           Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Client {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  email          String
  phone          String
  address        String
  status         String   @default("Active") // Active, Inactive, Completed
  creditScore    Int
  goalScore      Int
  joinDate       DateTime @default(now())
  disputes       Dispute[]
  progress       Int      @default(0)
  nextAction     String?
  totalPaid      Float    @default(0)
  dateOfBirth    DateTime?
  ssn            String?
  notes          String?
  monthlyFee     Float?
  servicePlan    String?  // Basic, Pro, Enterprise
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([organizationId])
  @@index([status])
}

model Dispute {
  id             String   @id @default(uuid())
  client         Client   @relation(fields: [clientId], references: [id])
  clientId       String
  type           String   // Late Payment, Collection Account, Credit Utilization, etc.
  creditor       String
  bureau         String   // Experian, Equifax, TransUnion
  status         String   @default("Draft") // Draft, Submitted, In Progress, Resolved, Rejected
  submitted      DateTime?
  lastUpdated    DateTime @default(now())
  priority       String   @default("Medium") // High, Medium, Low
  notes          String?
  creditImpact   Int      @default(0)
  disputeReason  String?
  nextAction     String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([clientId])
  @@index([organizationId])
  @@index([status])
}

model Task {
  id             String   @id @default(uuid())
  title          String
  description    String?
  status         String   @default("todo") // todo, in_progress, review, completed, blocked
  priority       String   @default("medium") // low, medium, high, urgent
  type           String   @default("general") // general, dispute, client, document, payment
  dueDate        DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  assignee       User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId     String?
  createdBy      User     @relation("TaskCreator", fields: [createdById], references: [id])
  createdById    String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  tags           String[]
  estimatedHours Float?
  actualHours    Float?
  attachments    String[]

  @@index([organizationId])
  @@index([assigneeId])
  @@index([createdById])
  @@index([status])
  @@index([priority])
}
